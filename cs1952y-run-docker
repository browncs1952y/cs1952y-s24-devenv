#! /bin/bash

maindir=""
container_name=cs1952y-container
network_name=cs1952y-network

clean=false
verbose=false
arch="$(uname -m)"
tag=
platform=

while test "$#" -ne 0; do
  case "$1" in 
    -C | --clean) 
      clean=true
      shift
      ;;
    -V | --verbose)
      verbose=true
      shift
      ;;
    -a | --arm | --arm64)
      if test "$arch" = "arm64" -o "$arch" = "aarch64"; then
          platform=linux/arm64
          shift
      else
          echo "\`cs1952y-run-docker --arm\` only works on ARM64 hosts" 1>&2
          exit 1
      fi
      ;;
    -x | --x86-64 | --x86_64 | --amd64)
      platform=linux/amd64
      ;;
    *)
      armtext=""
      if test "$arch" = "arm64" -o "$arch" = "aarch64"; then
          armtext=" [-a|--arm] [-x|--x86-64]"
      fi
      echo "Usage: cs1952y-run-docker [-C|--clean]$armtext [-V|--verbose]" 1>&2
      exit 1
      ;;
  esac
done

# set default platform if no arguments were provided
if test -z "$platform" -a \( "$arch" = "arm64" -o "$arch" = "aarch64" \); then
  platform=linux/arm64
elif test -z "$platform"; then
  platform=linux/amd64
fi

# set docker tag based on platform
if test -z "$tag" -a "$platform" = linux/arm64; then
  tag=cs1952y:arm64
elif test -z "$tag"; then
  tag=cs1952y:latest
fi

vexec () {
  if $verbose; then
      echo "$@"
  fi
  exec "$@"
}

has_network() {
  docker network ls | grep $network_name >/dev/null
}

has_container() {
  [[ $(docker ps -a | grep -c $container_name) -gt 0 ]]
}

create_network() {
  echo "cs1952y network not found, creating one..."
  docker network create -d bridge $network_name
}

set_xhost() {
  # Check if 'xhost' command is available
  if ! command -v xhost &> /dev/null; then
    echo "xhost command not found. X11 forwarding might not work."
    return
  fi

  case "$(uname)" in
    "Linux")
      xhost +local:docker
      ;;
    "Darwin")
      xhost +localhost
      ;;
    "CYGWIN"*|"MINGW32"*|"MSYS"*|"MINGW"*)
      ;;
  esac
}

copy_directories_to_host() {
  temp_container_name="${container_name}-temp"

  echo "Starting temporary container to copy files..."
  docker run -d --name "$temp_container_name" --platform "$platform" "$tag"

  echo "Copying gem5 and Ripes directories to host..."
  docker cp "${temp_container_name}:/home/cs1952y-user/gem5" "$maindir/home"
  docker cp "${temp_container_name}:/home/cs1952y-user/Ripes" "$maindir/home"

  echo "Stopping and removing temporary container..."
  docker stop "$temp_container_name"
  docker rm "$temp_container_name"
}

remove_containers() {
  echo "Removing all existing cs1952y containers..."
  docker ps -a -f name=cs1952y --format "{{.ID}}" | while read -r line; do
      docker rm --force "$line"
  done
}

start_container() {
  echo "Entering container..."
  docker start $container_name
  docker exec -it $container_name /bin/bash
}

start_new_container() {
  copy_directories_to_host

  echo "Starting a new container..."
  vexec docker run -it \
      --name $container_name \
      --platform $platform \
      --privileged \
      --cap-add=SYS_PTRACE --cap-add=NET_ADMIN --security-opt seccomp=unconfined \
      -m 16g \
      -v "$maindir/home":/home/cs1952y-user \
      -w "/home/cs1952y-user" \
      -p "0.0.0.0:9095:9095" \
      --network "$network_name" \
      $displayarg$x11mountarg \
      $netarg$sshenvarg $tag
}

# determine the correct stat format argument
if stat --format %i / >/dev/null 2>&1; then
  statformatarg="--format"
else
  statformatarg="-f"
fi

# get device id:inode of current script
myfileid=$(stat $statformatarg %d:%i "${BASH_SOURCE[0]}" 2>/dev/null)

# set maindir to directory containing cs1952y-run-docker script via 
# recursive searching to the root directory ('/')
dir="$(pwd)"
subdir=""
while [[ "$dir" != / && "$dir" != "" ]]; do
  thisfileid=$(stat $statformatarg %d:%i "$dir"/cs1952y-run-docker 2>/dev/null)
  if [[ -n "$thisfileid" && "$thisfileid" = "$myfileid" ]]; then
      maindir="$dir"
      break
  fi
  subdir="/$(basename "$dir")$subdir"
  dir="$(dirname "$dir")"
done

# if maindir is unset, try to set maindir to directory containing this script
if [[ -z "$maindir" && "${BASH_SOURCE[0]}" == "/*" ]]; then
  maindir="$(dirname "${BASH_SOURCE[0]}")"
  subdir=""
fi

# allow docker container to forward commands to host SSH agent socket
sshenvarg=""
if [ -n "$SSH_AUTH_SOCK" ] && [ "$(uname)" = "Darwin" ]; then
  sshenvarg=" -e SSH_AUTH_SOCK=/run/host-services/ssh-auth.sock"
fi

# check if Docker container is already running
if [[ -n "$maindir" ]]; then
  existing_image=$(docker ps -f status=running -f ancestor="$tag" -f volume="/host_mnt$maindir" --no-trunc --format "{{.CreatedAt}},{{.ID}}" | sort -r | head -n 1)
  if [[ -n "$existing_image" ]]; then
      created_at=${existing_image%%,*}
      image=${existing_image##*,}
      image12=${image:0:12}
      echo "* Using running container $image12, created $created_at" >&2
      echo "- To start a new container, exit then 'cs1952y-run-docker -f'" >&2
      echo "- To kill this container, exit then 'docker kill $image12'" >&2
      vexec docker exec -it"$sshenvarg" "$image" /bin/bash
  fi
fi

# set up X11 forwarding
displayarg=""
x11mountarg=""
case "$(uname)" in 
  "Linux")
    displayarg="-e DISPLAY "
    x11mountarg="-v /tmp/.X11-unix:/tmp/.X11-unix "
    ;;
  "Darwin")
    displayarg="-e DISPLAY=host.docker.internal:0 "
    ;;
  "CYGWIN"*|"MINGW32"*|"MSYS"*|"MINGW"*)
    displayarg="-e DISPLAY=host.docker.internal:0.0 "
    ;;
  *)
    echo "Unsupported OS for X11 forwarding"
    ;;
esac

set_xhost

# expose ports for Docker container
netarg=""
if test "$(uname)" = Darwin; then
    if ! netstat -n -a -p tcp | grep '\.6169[  ].*LISTEN' >/dev/null; then
        netarg="$netarg "'--expose=6169/tcp -p 6169:6169/tcp'
    fi
    if ! netstat -n -a -p tcp | grep '\.12949[ 	].*LISTEN' >/dev/null; then
        netarg="$netarg "'--expose=12949/tcp -p 12949:12949/tcp'
    fi
elif test -x /bin/netstat; then
    if ! netstat -n -a -p tcp | grep '\.6169[  ].*LISTEN' >/dev/null; then
        netarg="$netarg "'--expose=6169/tcp -p 6169:6169/tcp'
    fi
    if ! netstat -n -l -t | grep ':12949[ 	]' >/dev/null; then
        netarg="$netarg "'--expose=12949/tcp -p 12949:12949/tcp'
    fi
fi

if test -z "$maindir"; then
    echo "Error: could not determine your directory."
    exit 1
fi

# set up network for Docker container
has_network || create_network

# start docker container
if $clean; then
    remove_containers && start_new_container
elif has_container; then
    start_container
else
    start_new_container
fi
